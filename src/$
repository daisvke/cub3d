/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dtanigaw <dtanigaw@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/08/29 03:43:27 by dtanigaw          #+#    #+#             */
/*   Updated: 2022/08/31 22:21:52 by dtanigaw         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	c3d_draw_on_screen(t_c3d *env, t_mlx *mlx)
{
	int	x;
	int	y;

	y = 0;
	while (y < mlx->screenh)
	{
		x = 0;
		while (x < mlx->screenw)
		{
			mlx->canvas.addr[y * mlx->screenw + x] = env->buffer[y][x];
			++x;
		}
		++y;
	}
	mlx_put_image_to_window(mlx->mlx_ptr, mlx->win_ptr, mlx->canvas.mlx_img, 0, 0);
	for (int i=0; i < mlx->screenh; ++i)
		for (int j=0; j < mlx->screenw; ++j)
			env->buffer[i][j] = 0;
}

double	c3d_get_wall_xpos(t_ray ray, t_coord p1_pos)
{
	double		wall_x;

	if (ray.side == 0)
		wall_x = p1_pos.y + ray.delta_distx * ray.diry;
	else
		wall_x = p1_pos.x + ray.delta_distx * ray.dirx;
	wall_x -= floor(wall_x);
	return (wall_x);
}

int	c3d_get_texture_xpos(t_coord p1_pos, t_ray ray)
{
	double	wall_x;
	int		tex_x;

	wall_x = c3d_get_wall_xpos(ray, p1_pos);
	tex_x = (int)(wall_x * (double)_TEX_SIZE);
	if (ray.side == 0 && ray.dirx > 0)
		tex_x = _TEX_SIZE - tex_x - 1;
	if (ray.side == 1 && ray.diry < 0)
		tex_x = _TEX_SIZE - tex_x - 1;
	return (tex_x);
}

static void	c3d_get_wall_orientation(t_line *tex_line, t_ray ray)
{
	if (ray.side == 0 && ray.dirx < 0)
		tex_line->orientation = TYPE_NO;
	if (ray.side == 0 && ray.dirx >= 0)
		tex_line->orientation = TYPE_SO;
	if (ray.side == 1 && ray.diry < 0)
		tex_line->orientation = TYPE_EA;
	if (ray.side == 1 && ray.diry >= 0)
		tex_line->orientation = TYPE_WE;
}
/*
int	cub_add_shadow(int color, double dw)
{
	t_rgb	rgb;
	double	shade;

	shade = (10 - dw) / 10.0;
	if (shade < 0)
		shade = 0.01;
	rgb.r = ((color & 0x00FF0000) >> 16) * shade;
	rgb.g = ((color & 0x0000FF00) >> 8) * shade;
	rgb.b = (color & 0x000000FF) * shade;
	return (color);
}
*/
void	c3d_set_texture(t_c3d *env, t_line *tex_line, t_ray ray, int x)
{
	double	step;
	t_icoord	tex; //i?
	double	tex_pos;
	int		y;
	int		color;

	tex.x = c3d_get_texture_xpos(env->player.pos, ray);
	step = 1.0 * _TEX_SIZE / tex_line->lineheight;
	tex_pos = (tex_line->draw_start - env->mlx.screenh / 2
		+ tex_line->lineheight / 2) * step;
	c3d_get_wall_orientation(tex_line, ray);
	y = tex_line->draw_start;
	while (y < tex_line->draw_end)
	{
		tex.y = (int)tex_pos & (_TEX_SIZE - 1);
		tex_pos += step;
		printf("==y: %d  y=>%d x=>%d\n",y, tex_line->orientation,_TEX_SIZE * (int)tex.y + (int)tex.x);
		color = env->textures[tex_line->orientation][_TEX_SIZE * (int)tex.y + (int)tex.x];
		//env->mlx.buffer[y][x] = c3d_add_shadow(color, ray->deltaw);
		env->buffer[y][x] = color;
		++y;
	}
//	cub_set_floor_ceiling(t->start, t->end, x, env);
}

void	c3d_render_line_to_buffer(t_c3d *env, t_line line, t_ray ray, int x)
{
	int	y;

	y = 0;
	while (y < line.draw_start)
	{
		env->buffer[y][x] = env->floor.color; 
		++y;
	}
	y = line.draw_start;
	c3d_set_texture(env, &line, ray, x);
	while (y < env->mlx.screenh)
	{
		env->buffer[y][x] = env->ceiling.color; 
		++y;
	}
}
